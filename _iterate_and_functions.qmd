---
title: "Notes for live demo of iteration and custom functions"
author: 
  - name: John Little
    affiliations:
      - name: Duke University
        department: Center for Data & Vizualization Sciences

date-modified: 'today'
date-format: long

format: 
  html:
    footer: "CC BY 4.0 John R Little"

license: CC BY    
---

## Load library packages

```{r}
#| message: false
#| warning: false
library(tidyverse)
library(fs)
```

## Reference code

Iterate by using `ggplot2::facet_wrap()` and tall data.

```{r}
gapminder::gapminder |> 
  select(year, pop, continent, country) |> 
  ggplot(aes(year, pop)) +
  geom_line(aes(color = country), show.legend = FALSE) +
  facet_wrap(vars(continent))
```

### making a function

```{r}
add_10 <- function (my_var) {
  my_var <- (my_var + 10) / 3.14
  round(my_var)
}

add_10(44)
```

### Vectorization

```{r}
my_vec <- seq(3, 15, by = 0.9)
my_vec
my_vec / 3.14
```

### Some functions are already vectorized

```{r}
my_files <- dir_ls("data", regex = "brodhead*")
my_files


my_big_df <- read_csv(my_files, skip = 11, id = "filename")

my_big_df # |> distinct(filename)
```

### Nest

Using Tall data in a data frame to guide your interation

```{r}
my_big_df |> 
  nest(my_file = -filename)

starwars |> 
  nest(my_gender = -gender)
```

### Example

Using `facet_wrap`, make a scatter plot of mass over height.

```{r}
starwars |> 
  filter(mass < 500) |> 
  ggplot(aes(height, mass)) +
  geom_point(aes(color = gender)) +
  facet_wrap(vars(gender), nrow = 3)
```

### Dilemma

But what if we want to have three separate graphs?

Well, we can write the code by hand, taking into account each variation.

```{r}
starwars |> 
  filter(mass < 500) |> 
  filter(gender == "masculine") |> 
  ggplot(aes(height, mass)) +
  geom_point()  # + geom_smooth(method = lm, se = FALSE)

starwars |> 
  filter(mass < 500) |> 
  filter(gender == "feminine") |> 
  ggplot(aes(height, mass)) +
  geom_point()

starwars |> 
  filter(mass < 500) |> 
  filter(is.na(gender)) |> 
  ggplot(aes(height, mass)) +
  geom_point()
```

This works but is prone to error as we tweak our code because we'll have to make changes in three or more places.

## Nest

Because of this dilemma, we want to use functional programming as a means of iterating over a data frame. We can use existing library functions, compose custom functions, or compose anonymous functions. We apply those functions to the rows of a data frame using the {`purrr`} package -- specifically the `map()` family of functions.

To properly map our function over a tall data frame, we often want to nest data frames within a data frame. The `nest()` function creates a **list column** (i.e. a list data type) consisting of *data frames* more accurately, called *tibbles*.

The we *map* functions over those nested tibbles.

```{r}
starwars |> 
  filter(mass < 500) |> 
  nest(data = -gender) 
  # mutate(my_plot = map(data, ~ .x |> ggplot(aes(height, mass)) + geom_point())) |> 
  # mutate(my_other_plot = map(data, make_plot)) |> 
  # mutate(my_plot_title = map2(data, gender, ~ .x |> ggplot(aes(height, mass)) + geom_point() + ggtitle(.y))) |> 
  # mutate(my_fit = map(data, ~ lm(mass ~ height, data = .x))) |> 
  # mutate(my_fit_tidy = map(my_fit, broom::tidy)) |> 
  # unnest(my_fit_tidy) |> 
  # filter(term != "(Intercept)") |> 
  # filter(p.value < 0.5) |> 
  
# pull(my_plot_title)
```

### Custom function

`Alt + Ctrl + x`

```{r}
make_plot <- function(my_df) {
  my_df |> 
    ggplot(aes(height, mass)) +
    geom_point()
}
```

### Example

```{r}
starwars |> 
  select(name) |> 
  mutate(key = str_to_lower(name)) |> 
  mutate(key = str_replace_all(key, " ", "_"))

make_key <- function(my_df, my_var) {
  my_df |> 
    select({{my_var}}) |> 
    mutate(key = str_to_upper({{my_var}})) |> 
    mutate(key = str_replace_all(key, " ", "_")) |> 
    mutate(first_letter = str_extract({{my_var}}, "^\\w"))
}

starwars |> 
  make_key(name)

starwars |> 
  make_key(hair_color)

babynames::babynames |> 
  make_key(name)

economics_long |> 
  make_key(variable)
```

## More information

-   GitHub Code for the [Rfun workshop on iteration, custom functions, and regex](https://github.com/libjohn/workshop_rfun_iterate)

-   [YouTube playlist](https://www.youtube.com/watch?v=PrUnbYlC1kY&list=PLIUcX1JrVUNWW7RgPh9ysmJM3mBpIAlYG) supporting the above code.
