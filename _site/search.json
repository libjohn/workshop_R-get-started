[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This website is composed in the RStudio IDE, as R code authored as a Quarto notebooks. With Quarto it is easy to render multiple report formats such as a PDF document or this website. In this case the report format is a web site hosted at Quarto.pub. The code for this workshop and this webpage are all part of a single RStudio project that can be found in a GitHub repository. The code-along exercises for this workshop are in the GitHub repository but they are not part of the web site. You can work through the exercises by first downloading the GitHub repository. Then find the exercises within the _exercises directory.\nYou can find an outline for this two-day workshop. For more information or resource on learning R, please also visit the Rfun learning series."
  },
  {
    "objectID": "about.html#john-little",
    "href": "about.html#john-little",
    "title": "About",
    "section": "John Little",
    "text": "John Little\nJohn is a Data Science Librarian in the Center for Data & Visualization Sciences, Duke University Libraries. A self-identified data-geek, John likes helping researchers navigate practical data science challenges through workshops and consultation.  To that end, John developed the R we having fun yet‽ learning resource (https://Rfun.library.duke.edu).\n\n\n\n\n\n\n\nAt Duke University John strives to present workshops focused on revealing R as a data-first coding language; extolling the virtues of the Tidyverse dialect; and modeling Reproducibility as a meaningful way to generate transparent analysis.  John maintains an active YouTube channel with recording of previously offered workshops:  https://youtu.be/@johnlittle1"
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "Data and code",
    "section": "",
    "text": "All data are readily available for this workshop.\nWhenever possible on-board datasets are used. This means you do not have to load any data, but you may have to load a library. For example the starwars dataset is part of the {dplyr} package. You may first have to load library(dplyr) to access the starwars data frame. Alternatively, you could access the data with the fully verbose package::object syntax: dplyr::starwars.\nSome data sets are imported via the read_csv function. You an download the data and code from github (See GitHub icon; right-hand side of this webpage header), expand the zipped file. Then you’ll find a data folder with the CSV files used in this workshop. Refer to the import page for tips on importing data."
  },
  {
    "objectID": "data.html#code",
    "href": "data.html#code",
    "title": "Data and code",
    "section": "Code",
    "text": "Code\nYou an download the data and code from github (See GitHub icon; right-hand side of this webpage header), expand the zipped file. Double click the workshop_R-get-started.Rproj file to launch all of the code directly into an RStudio project."
  },
  {
    "objectID": "import.html",
    "href": "import.html",
    "title": "Import Data",
    "section": "",
    "text": "Did you start with a Project?\n\n\n\nReproducibility starts at the foundation! Always begin by opening a project. See New Projects for tips.\nIn this workshop we recommend the Tidyverse approach to learning and using R\nBelow are some of the core tidyverse packages. There are many more very handy tidyverse packages."
  },
  {
    "objectID": "import.html#quick-and-easy",
    "href": "import.html#quick-and-easy",
    "title": "Import Data",
    "section": "Quick and easy",
    "text": "Quick and easy\nIt’s way better and hardly any more effort to follow the steps below, but if you’ve gotta get going, try this\n\n\n\nImport dataset"
  },
  {
    "objectID": "import.html#load-library-packages",
    "href": "import.html#load-library-packages",
    "title": "Import Data",
    "section": "Load library packages",
    "text": "Load library packages\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "import.html#import-data",
    "href": "import.html#import-data",
    "title": "Import Data",
    "section": "Import data",
    "text": "Import data\nIn RStudio,, in the Files quadrant and tab, click the data folder, then left-click the brodhead_center.csv file. Using the context menu, choose the Import Dataset… option. Once inside the data wizard, you can paste the necessary code into the code chunk below\n\n# library(readr)\nbrodhead_center <- read_csv(\"data/brodhead_center.csv\")\n# view(brodheadCenter)\n\n\n\n\n\n\n\nEasy way to write read_csv or any data import code…\n\n\n\nWriting the import data function can be tricky. Try the import wizard pictured above. THEN, paste the code from the Code Preview section into your script.\n\n\n\nEasily write import data function\n\n\n\n\n\nLook at the data object\nNow that you’ve assigned the output from the read_csv function to the name brodhead_center, simply call that object name in a code chunk.\n\nbrodhead_center"
  },
  {
    "objectID": "import.html#visualize-your-data-with-ggplot2",
    "href": "import.html#visualize-your-data-with-ggplot2",
    "title": "Import Data",
    "section": "Visualize your data with {ggplot2}",
    "text": "Visualize your data with {ggplot2}\nHere’s a quick teaser on visualizing data. Read more in the visualization chapter.\n\nbrodhead_center |> \n  ggplot(aes(x = name, y = cost)) +\n  geom_boxplot() \n\n\n\n\n\nbrodhead_center |> \n  ggplot(aes(x = rating, y = cost)) +\n  geom_point(aes(color = name))\n\nWarning: Removed 3 rows containing missing values (`geom_point()`).\n\n\n\n\n\n\n\nShow the code\nbrodhead_center |> \n  drop_na(rating, cost, name) |> \n  ggplot(aes(x = factor(rating), y = cost)) +\n  geom_tile(aes(fill = name)) +\n  scale_y_continuous(label = scales::dollar) +\n  scale_fill_brewer(palette = \"Dark2\") + \n  labs(x = \"rating\", y = NULL, title = \"Heatmap: cost over ratings\", \n       caption = \"Source: https://github.com/libjohn/tutorial_intro2r_brain\",\n       fill = \"Restaurant name\") +\n  theme_classic() +\n  theme(plot.title.position = \"plot\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "R workshop - get started",
    "section": "",
    "text": "Let’s learn R"
  },
  {
    "objectID": "index.html#first-steps",
    "href": "index.html#first-steps",
    "title": "R workshop - get started",
    "section": "First steps",
    "text": "First steps\n\nTour of your Local File System\n\nR / RStudio\nClone code from GitHub\n\nStart a new project by importing the github repository for this workshop\n\nhttps://github.com/libjohn/foo.git\n\nOpen the import.qmd notebook-file from the Files tab in the RStudio IDE"
  },
  {
    "objectID": "index.html#pipes-and-assignment",
    "href": "index.html#pipes-and-assignment",
    "title": "R workshop - get started",
    "section": "Pipes and Assignment",
    "text": "Pipes and Assignment\nSome coding syntax is unique in R and the Tidyverse. You will see these symbols frequently.\n\n\n\n\n\n\n<- Assignment - “gets value from”\n\n\n\nBy convention we use two assignment symbols when creating object names\n\n<- typically used at the beginning of a pipeline or function\n= typically used within the mutate function\n\nKeystroke:\nAlt-dash\nExample:\nmy_vector <- c(2, 4, 6:9)\n\n\n\n\n\n\n\n\n%>% Pipes and pipelines - “and then”\n\n\n\nWe can create data sentences, or pipelines, by chaining many functions together from left to right.\nThere are at least three main pipe symbols\n\n|> or %>%\n+ only used in ggplot2 pipelines\n\nKeystroke:\nCtrl-shift-M or Cmd-shift-M\nExample:\ncars |> select(speed)"
  },
  {
    "objectID": "join.html",
    "href": "join.html",
    "title": "Join two data frames",
    "section": "",
    "text": "library(tidyverse)"
  },
  {
    "objectID": "join.html#join",
    "href": "join.html#join",
    "title": "Join two data frames",
    "section": "Join",
    "text": "Join\nThere are a series of join commands\n\nleft_join, inner_join, right_join, full_join,\nsemi_join, anti_join\n\n\n\n\ndplyr joins visualized\n\n\nFirst let’s read in the favorability ratings data from fivethirtyeight.com"
  },
  {
    "objectID": "join.html#data",
    "href": "join.html#data",
    "title": "Join two data frames",
    "section": "data",
    "text": "data\nThese exercisees use the following ggplot2 training datasets\n\ndplyr::starwars\nData from fivethrityeight.org (modified)\n\n\nfav_ratings <- read_csv(\"data/538_favorability_popularity.csv\", skip = 11)\nfav_ratings\n\n\n\n  \n\n\n\n\nstarwars\n\n\n\n  \n\n\n\nJoin on a key that is common across two data frames. For best results use a numeric key that promotes precision. Of course, we’re going to use a alphabetic key, name, which will highlight what can go wrong and introduce troubleshooting strategies.\nIn this case, the key will be the name variable that is common to both tables. We’re using the fav_ratings tibble and the starwars tibble.\n\nfav_ratings %>% \n  # left_join(starwars, by = \"name\") |> \n  # left_join(starwars, by = c(\"name\" = \"name\"))\n  left_join(starwars)  %>%\n  arrange(desc(fav_rating))\n\nJoining with `by = join_by(name)`\n\n\n\n\n  \n\n\n\n\nanti_join\nwhat is in the left table and not the right table.\n\nanti_join(fav_ratings, starwars) %>% arrange(name)\n\nJoining with `by = join_by(name)`\n\n\n\n\n  \n\n\nanti_join(starwars, fav_ratings) %>% arrange(name)\n\nJoining with `by = join_by(name)`\n\n\n\n\n  \n\n\n\n\n\nsemi_join or inner_join\njoin only the rows that match.\n\nfav_ratings |> \n  semi_join(starwars)\n\nJoining with `by = join_by(name)`\n\n\n\n\n  \n\n\n\n\n\nRegex\nRegular expressions and {stringr} can be handy when manipulating character variables into join keys.\n\nstr_detect()\nstr_to_lower()\nstr_remove()\nstr_trim()\nstr_extract()\n\n\nstarwars %>% \n  filter(str_detect(name, \n                    regex(\"3p|palpatine|obi|amidala|leia|d2\", \n                          ignore_case = TRUE))) %>% \n  arrange(name)\n\n\n\n  \n\n\n\n\nfav_ratings %>% \n  filter(str_detect(name, \n                    regex(\"3p|palpatine|obi|amidala|leia|d2\", \n                          ignore_case = TRUE))) %>% \n  arrange(name)"
  },
  {
    "objectID": "join.html#see-also",
    "href": "join.html#see-also",
    "title": "Join two data frames",
    "section": "See Also",
    "text": "See Also\n\ndplyr::bind_rows()\ndplyr::bind_cols()"
  },
  {
    "objectID": "LICENSE.html",
    "href": "LICENSE.html",
    "title": "R/Tidyverse/Quarto - get started",
    "section": "",
    "text": "Attribution 4.0 International\n=======================================================================\nCreative Commons Corporation (“Creative Commons”) is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an “as-is” basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible.\nUsing Creative Commons Public Licenses\nCreative Commons public licenses provide a standard set of terms and conditions that creators and other rights holders may use to share original works of authorship and other material subject to copyright and certain other rights specified in the public license below. The following considerations are for informational purposes only, are not exhaustive, and do not form part of our licenses.\n Considerations for licensors: Our public licenses are\n intended for use by those authorized to give the public\n permission to use material in ways otherwise restricted by\n copyright and certain other rights. Our licenses are\n irrevocable. Licensors should read and understand the terms\n and conditions of the license they choose before applying it.\n Licensors should also secure all rights necessary before\n applying our licenses so that the public can reuse the\n material as expected. Licensors should clearly mark any\n material not subject to the license. This includes other CC-\n licensed material, or material used under an exception or\n limitation to copyright. More considerations for licensors:\nwiki.creativecommons.org/Considerations_for_licensors\n\n Considerations for the public: By using one of our public\n licenses, a licensor grants the public permission to use the\n licensed material under specified terms and conditions. If\n the licensor's permission is not necessary for any reason--for\n example, because of any applicable exception or limitation to\n copyright--then that use is not regulated by the license. Our\n licenses grant only permissions under copyright and certain\n other rights that a licensor has authority to grant. Use of\n the licensed material may still be restricted for other\n reasons, including because others have copyright or other\n rights in the material. A licensor may make special requests,\n such as asking that all changes be marked or described.\n Although not required by our licenses, you are encouraged to\n respect those requests where reasonable. More considerations\n for the public: \nwiki.creativecommons.org/Considerations_for_licensees\n=======================================================================\nCreative Commons Attribution 4.0 International Public License\nBy exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution 4.0 International Public License (“Public License”). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions.\nSection 1 – Definitions.\n\nAdapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image.\nAdapter’s License means the license You apply to Your Copyright and Similar Rights in Your contributions to Adapted Material in accordance with the terms and conditions of this Public License.\nCopyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights.\nEffective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements.\nExceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material.\nLicensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License.\nLicensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license.\nLicensor means the individual(s) or entity(ies) granting rights under this Public License.\nShare means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them.\nSui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world.\nYou means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning.\n\nSection 2 – Scope.\n\nLicense grant.\n\nSubject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to:\n\nreproduce and Share the Licensed Material, in whole or in part; and\nproduce, reproduce, and Share Adapted Material.\n\nExceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions.\nTerm. The term of this Public License is specified in Section 6(a).\nMedia and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a)\n\nnever produces Adapted Material.\n\nDownstream recipients.\n\nOffer from the Licensor – Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License.\nNo downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material.\n\nNo endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i).\n\nOther rights.\n\nMoral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise.\nPatent and trademark rights are not licensed under this Public License.\nTo the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties.\n\n\nSection 3 – License Conditions.\nYour exercise of the Licensed Rights is expressly made subject to the following conditions.\n\nAttribution.\n\nIf You Share the Licensed Material (including in modified form), You must:\n\nretain the following if it is supplied by the Licensor with the Licensed Material:\n\nidentification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated);\na copyright notice;\na notice that refers to this Public License;\na notice that refers to the disclaimer of warranties;\na URI or hyperlink to the Licensed Material to the extent reasonably practicable;\n\nindicate if You modified the Licensed Material and retain an indication of any previous modifications; and\nindicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License.\n\nYou may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information.\nIf requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable.\nIf You Share Adapted Material You produce, the Adapter’s License You apply must not prevent recipients of the Adapted Material from complying with this Public License.\n\n\nSection 4 – Sui Generis Database Rights.\nWhere the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material:\n\nfor the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database;\nif You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material; and\nYou must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database.\n\nFor the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights.\nSection 5 – Disclaimer of Warranties and Limitation of Liability.\n\nUNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS, IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION, WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU.\nTO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION, NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT, INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES, COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR IN PART, THIS LIMITATION MAY NOT APPLY TO YOU.\nThe disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability.\n\nSection 6 – Term and Termination.\n\nThis Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically.\nWhere Your right to use the Licensed Material has terminated under Section 6(a), it reinstates:\n\nautomatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or\nupon express reinstatement by the Licensor.\n\nFor the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License.\nFor the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License.\nSections 1, 5, 6, 7, and 8 survive termination of this Public License.\n\nSection 7 – Other Terms and Conditions.\n\nThe Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed.\nAny arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License.\n\nSection 8 – Interpretation.\n\nFor the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License.\nTo the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions.\nNo term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor.\nNothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority.\n\n=======================================================================\nCreative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the “Licensor.” The text of the Creative Commons public licenses is dedicated to the public domain under the CC0 Public Domain Dedication. Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark “Creative Commons” or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses.\nCreative Commons may be contacted at creativecommons.org."
  },
  {
    "objectID": "longer_wider.html",
    "href": "longer_wider.html",
    "title": "Pivot",
    "section": "",
    "text": "Often our goal is to reshape our data frame into a tidy data (Wickham 2014) format, frequently known as tall data. We can use the {tidyr} package to reshape data into tall or wide formats. When coding in the tidyverse context, tall data is much easier to iterate over — without ever writing an for loop or other kind of flow control. Later, in the advance section, we’ll introduce the {purrr} package for powerful iteration techniques.\nSee Also the Pivot Vignette:"
  },
  {
    "objectID": "longer_wider.html#load-library-packages",
    "href": "longer_wider.html#load-library-packages",
    "title": "Pivot",
    "section": "Load library packages",
    "text": "Load library packages\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "longer_wider.html#data",
    "href": "longer_wider.html#data",
    "title": "Pivot",
    "section": "Data",
    "text": "Data\nFind practice datasets from the tidyr package…\n\ndata(relig_income)\ndata(fish_encounters)"
  },
  {
    "objectID": "longer_wider.html#longer",
    "href": "longer_wider.html#longer",
    "title": "Pivot",
    "section": "Longer",
    "text": "Longer\n\npivot_longer()\n\nWe can start with the tidyr::relig_income data frame. This is wide data and does not conform to tidy data(Wickham 2014) principles. This makes it harder to interate over by row because there are multiple observations in each row. In this data frame, each row has 10 observations, one observation for each income category.\n\nrelig_income\n\n\n\n  \n\n\n\nWe can pivot this to tall data (i.e. pivot_longer) so that we have one observation per row for a total of 180 rows.\n\nrelig_income %>%\n  pivot_longer(-religion, names_to = \"income\", values_to = \"count\")"
  },
  {
    "objectID": "longer_wider.html#wider",
    "href": "longer_wider.html#wider",
    "title": "Pivot",
    "section": "Wider",
    "text": "Wider\nOf course, sometimes we want wide data. There are a variety of reasons to wrangle data into a wide-data format and we will discuss that, below. Here we use pivot_wider to accomplish this.\n\nfish_encounters\n\n\n\n  \n\n\n\n\nfish_encounters %>% \n  pivot_wider(names_from = station, values_from = seen)"
  },
  {
    "objectID": "longer_wider.html#why-pivot-data",
    "href": "longer_wider.html#why-pivot-data",
    "title": "Pivot",
    "section": "Why pivot data?",
    "text": "Why pivot data?\nWhy pivot data? Your analysis may be easier, or may require, the shape of data to match a particular structure. For example, ggplot generally prefers long tidy data. For example, once the data are properly shaped, analysis and variations becomes easier. Below is a quick example of using ggplot to format data in a long and tidy shape to create a bar plot. Of course, the plot needs some refining and hence improvements become easier to accomplish with the tall data shape. Nonetheless, below shows an initial draft of a bar plot.\n\n\nCode\nrelig_income %>%\n  pivot_longer(-religion, names_to = \"income\", values_to = \"count\") %>% \n  ggplot(aes(religion, count, fill = income)) +\n  geom_col()\n\n\n\n\n\nOnce the data are properly shaped, variations on analysis becomes easier. Here I will, additionally, format some of the variables as categorical vectors, so that I can redraw the plot for more clarity. That is, to tell my data story more clearly.\nMy goal is to format the vectors as factors using the forcats package. This will allow me arrange\n\nthe order of the bars\nthe order of the stacked elements of each bar\nthe order of the Legend\n\nI will also change the color scheme of the discrete color from the fill argument, in combination with the scale_fill_iridis_d function.\n\n\nCode\ninc_levels = c(\"Don't know/refused\",\n               \"<$10k\", \"$10-20k\", \"$20-30k\", \"$30-40k\",\n               \"$40-50k\", \"$50-75k\", \"$75-100k\", \"$100-150k\",\n               \">150k\")\n\nrelig_income %>%\n  pivot_longer(-religion, names_to = \"income\", values_to = \"count\") %>% \n  mutate(income = fct_relevel(income, inc_levels)) %>% \n  ggplot(aes(fct_reorder(religion, count), \n             count, fill = fct_rev(income))) +\n  geom_col() +\n  scale_fill_viridis_d(direction = -1) +\n  coord_flip() \n\n\n\n\n\nNonetheless, unpivoted, wide data, can be subset and visualized even though this is not ideal when attempting visualization variations on a more complex data frame. Here, unpivoted, I will make a bar chart of religious affiliation for incomes between $40k and $50k.\n\n\nCode\nrelig_income %>% \n  ggplot(aes(fct_reorder(religion, `$40-50k`), `$40-50k`)) +\n  geom_col() + \n  coord_flip()\n\n\n\n\n\nNote: Tidy, pivot_longer, data will be easier to manipulate with ggplot2. For example, You can subset the data with a single filter function, thereby more easily enabling different income charts. Below, although there is an additional line of code, the code is easier to read and easier to modify if I want to use a different income value.\n\nfilter(income == \"$40-50k\")\n\n\n\nCode\nrelig_income %>%\n  pivot_longer(-religion, names_to = \"income\", values_to = \"count\") %>% \n  filter(income == \"$40-50k\") %>% \n  ggplot(aes(fct_reorder(religion, count), count)) +\n  geom_col() +\n  coord_flip() \n\n\n\n\n\nIt also becomes a natural step to make comparisons with all the income values using ggplot2::facet_wrap()\n\n\nCode\nrelig_income %>%\n  pivot_longer(-religion, names_to = \"income\", values_to = \"count\") %>% \n  mutate(income = fct_relevel(income, inc_levels)) %>% \n  ggplot(aes(fct_reorder(religion, count), \n             count)) +\n  geom_col(show.legend = FALSE) +\n  coord_flip() +\n  facet_wrap(~ income, nrow = 2)\n\n\n\n\n\nAnother variation. Again, ggplot2 affordances are easier to leverage with tall data.\n\n\nCode\nrelig_income %>%\n  pivot_longer(-religion, names_to = \"income\", values_to = \"count\") %>% \n  mutate(religion = fct_lump_n(religion, 4, w = count)) %>% \n  mutate(income = fct_relevel(income, inc_levels)) %>% \n  group_by(religion, income) %>%\n  summarise(sumcount = sum(count)) %>% \n  ggplot(aes(fct_reorder(religion, sumcount), \n             sumcount)) + \n  geom_col(fill = \"grey80\", show.legend = FALSE) +\n  geom_col(data = . %>% filter(income == \"$40-50k\"),\n           fill = \"firebrick\") +\n  geom_col(data = . %>% filter(income == \">150k\"),\n           fill = \"forestgreen\") +\n  coord_flip() +\n  facet_wrap(~ income, nrow = 2)"
  },
  {
    "objectID": "outline.html",
    "href": "outline.html",
    "title": "Two-day R data-science workshop",
    "section": "",
    "text": "What is R\n\ndata-first programming/coding language\nextend R with domain-specific packages. See: MetaCran, CRAN, github, bioconductor\n\nWhat is the Tidyverse\nWhat is Tidy data\nReproducibility: data-first tools help leverage reproducible workflows throughout computational thinking\n\nblank-slate instead of .Rdata\nRestart instead of rm(list = ls())\nIntentional use of the RStudio projects feature\nVersion Control: git and GitHub\n{renv} for archiving/documenting package environments\n\nTool suite\n\nRStudio\nQuarto Notebooks (Merge literate coding with report rendering)\n{dplyr} & {tidyr} - a grammar for data wrangling\n{ggplot2} - a grammar of graphics\nOther packages e.g. {readr}, {forcats}, {stringr}, {purrr}, {tidymodels}\n\nConsole\n\nbasic computation\nvectors and vectorized math\nenvironment variables and data variables\nassignment variables: <- and = (not the same as equivalency ==)\npipes = |> and %>%\n\nRStudio Projects\n\nuse projects instead of setwd() ; relative paths are vital to reproducibility\nDocuments: Quarto document\n\nImport CSV data\n\nread_csv() and the data import wizard found in Files tab and Environment tab\nOther data formats\n\n{readxl}, {haven}\n\nSQL\n\nCode-chunks can perform SQL\n{dbplyr}\nBest Practices with Databases\n\nExercise\n\nimport a CSV file\nimport a Stata categorical file using {haven}\n\n\n{dplyr}\n\nselect(), filter(), arrange(), mutate(), group_by(), summarize(), count()\nExercise\nSemantic meaning in data \nCodebooks in a literate coding context\n\n\n\n\n\n\n\n\n{ggplot2} viz\n\nExercise\n\nbasic interactivity - ggplotly()\n\nExercise\n\n{broom} and handling modeling outputs (e.g. linear regression)\n\nAdvertise {tidymodels}\nExercise\n\n{skimr} and EDA \n\nskim()\nReprise group_by() and summarize() \n\n{tidyr} pivot_longer() and pivot_wider()\n\nTall data - what is it?\nTall data for iteration: computation \nTall data for visualization , facet_wrap()\nTall data for modeling ; {purrr} a first look.\n\njoin with dplyr::left_join() or other {dplyr} join functions\nWrap-up and Summarize the day"
  },
  {
    "objectID": "outline.html#day-two",
    "href": "outline.html#day-two",
    "title": "Two-day R data-science workshop",
    "section": "Day Two",
    "text": "Day Two\n\nPart 3 Iteration and custom functions\n\nQuestions from yesterday\nR is a functional programming language\n\nWhat is functional programing?\n\nCustomizing functions and iterating without FOR loops\n\nFOR loops?\nTidyverse preference for data frames\n\nVectorized math (review)\n\nVectorized iteration ; environment variables and data variables\n\nCase study - import multiple data files + data cleaning + analysis + visualization\n\nread_csv() again\n\nIntroduce {stringr} and regular expressions\nSome nifty data wrangling functions\nComposing custom functions\nNesting data for iteration\n\n\n\n\n\nPart 4 Review, questions, case study, reports\n\nQuestions / Review\nSetup case study\nUsing R to orchestrate data workflows\nReproducible report rendering (slides, PDF, dashboards, etc.)\nSummarize\nFinding help"
  },
  {
    "objectID": "outline.html#resources",
    "href": "outline.html#resources",
    "title": "Two-day R data-science workshop",
    "section": "Resources",
    "text": "Resources\n\nR for Data Science: book | slack\nTidyverse primers\nRStudio IDE > Help > [ Documentation | Forum | Cheatsheets | Shortcuts ] & on-board Help tab\n\nRStudio User Guide\n\nTidyverse webpages: {package_name}.tidyverse.org (e.g. ggplot2.tidyverse.org)\nInteractivity\n\nHTMLWidgets\nObservableJS\nShiny"
  },
  {
    "objectID": "outline.html#recommendations",
    "href": "outline.html#recommendations",
    "title": "Two-day R data-science workshop",
    "section": "Recommendations",
    "text": "Recommendations\n\nBlank slate\nUse the Projects in the RStudio IDE\nUse version control (git and GitHub)\nUse {renv} for package reproducible environments\nUse mybinder.org for sharing containers in a reproducible/replicable state"
  },
  {
    "objectID": "packages.html",
    "href": "packages.html",
    "title": "Data and code",
    "section": "",
    "text": "Remember. R and RStudio are not the same thing. It’s a good idea to have up-to-date installations. As of this writing, the easiest way to find both applications for local download are from the post.co page\n\n\n\nDownload R and RStudio"
  },
  {
    "objectID": "packages.html#install-r-and-rstudio",
    "href": "packages.html#install-r-and-rstudio",
    "title": "Data and code",
    "section": "Install R and RStudio",
    "text": "Install R and RStudio\nFollow this link for a nice interactive tutorial on installing R and RStudio"
  },
  {
    "objectID": "packages.html#quarto-installation",
    "href": "packages.html#quarto-installation",
    "title": "Data and code",
    "section": "Quarto installation",
    "text": "Quarto installation\nQuarto comes pre-installed with the latest versions of RStudio. However, if you want to install Quarto again, or for use with VSCode, just to to Quarto.org"
  },
  {
    "objectID": "packages.html#install-packages",
    "href": "packages.html#install-packages",
    "title": "Data and code",
    "section": "Install packages",
    "text": "Install packages\nPackages can be installed with the install.packages() function. Alternatively, from within RStudio > Packages > install\n\n\n\nInstall packages\n\n\n\n\n\n\n\n\nInstall Once!\n\n\n\nYou only have to install a package once and should avoid putting the install.packages() function in your scripts. Of course, you will need to update packages from time to time."
  },
  {
    "objectID": "packages.html#load-packages",
    "href": "packages.html#load-packages",
    "title": "Data and code",
    "section": "Load packages",
    "text": "Load packages\nYou should load packages at the top of your script. Then write your script. Then Run All\n\n\n\n\n\nLoad packages\n\n\n\n\n\nRun packages"
  },
  {
    "objectID": "packages.html#loading-the-tidyverse",
    "href": "packages.html#loading-the-tidyverse",
    "title": "Data and code",
    "section": "Loading the tidyverse",
    "text": "Loading the tidyverse\n\n\n\n\n\n\nTidyverse is a meta-package of several packages\n\n\n\n\nTidyverse (Wickham et al. 2019) is a concept but also a package. More accurately it’s a meta-package that loads about eight other packages. When you type load(tidyverse), there’s no need to also load ggplot2, dplyr, lubridate or any of the packages that tidyverse loads. Redundantly, it’s fine to write multiple load statements, but check the feedback from the code-chunk and you’ll see what is being loaded by load(tidyverse)."
  },
  {
    "objectID": "proj.html",
    "href": "proj.html",
    "title": "Projects",
    "section": "",
    "text": "R and RStudio are not the same thing — they go together\n\n\n\nR is a coding language interpreter. RStudio is an Integrated Development Environment (IDE) used to make it easier to interact with the coding language.\n\n\nThe projects feature of R is useful for keeping project and ideas discrete. Using the project feature helps us set-up and maintain an reproducible workflow, makes it easier to share our code with others, and enables good coding hygiene, such as using relative file paths\n\n\n\n\n\n\n\nRStudio Projects\n\n\n\nLook in the upper-right corner of your RStudio IDE. Or, File > New Projects\nChoose between New, Existing, or Version Control.\nIf you choose a New project, there are several options for project types. I recommend starting with Quarto Project2\n\n\n\n\n\n\nNew Quarto project\n\n\n\n\n\nNew Quarto Document\n\n\n\n\n\n\n\n\n\n\nSwitch between projects\n\n\n\nBy clicking the upper-right hand corner of your project name, you’ll be able to easily switch between projects."
  },
  {
    "objectID": "proj.html#settings-in-rstudio-preferences",
    "href": "proj.html#settings-in-rstudio-preferences",
    "title": "Projects",
    "section": "Settings in RStudio preferences",
    "text": "Settings in RStudio preferences\nFurther recommendations on reproducibility suggest setting the following global preferences\n\n\n\n\n\nGlobal options > General\n\n\n\n\n\nGlobal options > Code\n\n\n\n\n\n\n\n\n\nTools > Global options\n\n\n\nUncheck\n\nRestore most recently opened project (uncheck)\nRestore previously open source document (uncheck)\nRestore .Rdata (uncheck)\nSave workspace to .RData to NEVER\nAlways save history (uncheck)"
  },
  {
    "objectID": "proj.html#reproducibility",
    "href": "proj.html#reproducibility",
    "title": "Projects",
    "section": "Reproducibility",
    "text": "Reproducibility\nReproducibility is an that supports from compuational thinking by ensuring all documents, analysis, data, and code are readily available so that the computations can be executed and re-executed to achieve identical results3\n\n\n\n\n\nReproducibility pyramid (Little and Lafferty-Hess, 2023)\n\n\n\nTwo fot he most basic principle in reproducibility are…\n\nDo everything with code\nRender documents from code\n\n\nDeveloping computation techniques to honor these principles means, whenever possible, reduce or eliminate mouse-clicks, copy/paste steps, and other computational actions. Among other reasons, we do this because such actions are hard to document for ourselves and others.\nIn this way, using a coding language such as R along with a reproducible publishing scheme such as Quarto, while also incorporating literate coding(Knuth 1984), tidy data(Wickham 2014), and and tidyverse principles(Wickham et al. 2019) is an ideal way to ensure not only the reproducibility of your analysis.\nBuilding on these strong foundations increases the chances of archiving your work for posterity. We have learned this by looking back at the computational workflows of the nineteen seventies through the early two-thousands. Many, if not most of which can no longer be reproduced without excessive retrofitting expense."
  },
  {
    "objectID": "regression.html",
    "href": "regression.html",
    "title": "Regression",
    "section": "",
    "text": "library(dplyr)\nlibrary(ggplot2)\nlibrary(moderndive)\nlibrary(broom)\nlibrary(skimr)"
  },
  {
    "objectID": "regression.html#data",
    "href": "regression.html#data",
    "title": "Regression",
    "section": "Data",
    "text": "Data\nData are from the moderndive package1. Modern dive (Kim, Ismay, and Kuhn 2021) and the dplyr package (Wickham et al. 2023).\n\nevals_ch5 <- evals %>% \n  select(ID, score, bty_avg, age)\n\nevals\n\n\n\n  \n\n\nevals_ch5\n\n\n\n  \n\n\n\n\nevals_ch5 %>% \n  summary()\n\n       ID            score          bty_avg           age       \n Min.   :  1.0   Min.   :2.300   Min.   :1.667   Min.   :29.00  \n 1st Qu.:116.5   1st Qu.:3.800   1st Qu.:3.167   1st Qu.:42.00  \n Median :232.0   Median :4.300   Median :4.333   Median :48.00  \n Mean   :232.0   Mean   :4.175   Mean   :4.418   Mean   :48.37  \n 3rd Qu.:347.5   3rd Qu.:4.600   3rd Qu.:5.500   3rd Qu.:57.00  \n Max.   :463.0   Max.   :5.000   Max.   :8.167   Max.   :73.00  \n\n\n\nskimr::skim(evals_ch5)\n\n\nData summary\n\n\nName\nevals_ch5\n\n\nNumber of rows\n463\n\n\nNumber of columns\n4\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nnumeric\n4\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nID\n0\n1\n232.00\n133.80\n1.00\n116.50\n232.00\n347.5\n463.00\n▇▇▇▇▇\n\n\nscore\n0\n1\n4.17\n0.54\n2.30\n3.80\n4.30\n4.6\n5.00\n▁▁▅▇▇\n\n\nbty_avg\n0\n1\n4.42\n1.53\n1.67\n3.17\n4.33\n5.5\n8.17\n▃▇▇▃▂\n\n\nage\n0\n1\n48.37\n9.80\n29.00\n42.00\n48.00\n57.0\n73.00\n▅▆▇▆▁"
  },
  {
    "objectID": "regression.html#correlation",
    "href": "regression.html#correlation",
    "title": "Regression",
    "section": "Correlation",
    "text": "Correlation\n\nstrong correlation\nUsing the cor function to show correlation. For example see the strong correlation between starwars$mass to starwars$height\n\nmy_cor_df <- starwars %>% \n  filter(mass < 500) %>% \n  summarise(my_cor = cor(height, mass))\nmy_cor_df\n\n\n\n  \n\n\n\nThe cor() function shows a positive correlation of 0.7612612. This indicates a positive correlation between height and mass.\n\n\nweak correlation\nBy contrast, see here a regression line that visualizes the weak correlation between evals_ch5$score and evals_ch5$age\n\nevals_ch5 %>% \n  ggplot(aes(score, age)) +\n  geom_jitter() +\n  geom_smooth(method = lm, formula = y ~ x, se = FALSE)"
  },
  {
    "objectID": "regression.html#linear-model",
    "href": "regression.html#linear-model",
    "title": "Regression",
    "section": "Linear model",
    "text": "Linear model\n\nFor every increase of 1 unit increase in bty_avg, there is an associated increase of, on average, 0.067 units of score. from ModenDive\n\n\n# Fit regression model:\nscore_model <- lm(score ~ bty_avg, data = evals_ch5)\n\nscore_model\n\n\nCall:\nlm(formula = score ~ bty_avg, data = evals_ch5)\n\nCoefficients:\n(Intercept)      bty_avg  \n    3.88034      0.06664  \n\n\n\nsummary(score_model)\n\n\nCall:\nlm(formula = score ~ bty_avg, data = evals_ch5)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-1.9246 -0.3690  0.1420  0.3977  0.9309 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  3.88034    0.07614   50.96  < 2e-16 ***\nbty_avg      0.06664    0.01629    4.09 5.08e-05 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.5348 on 461 degrees of freedom\nMultiple R-squared:  0.03502,   Adjusted R-squared:  0.03293 \nF-statistic: 16.73 on 1 and 461 DF,  p-value: 5.083e-05"
  },
  {
    "objectID": "regression.html#broom",
    "href": "regression.html#broom",
    "title": "Regression",
    "section": "Broom",
    "text": "Broom\nThe {broom} package is useful for containing the outcomes of some models as data frames. A more holistic approach to tidy modeling is to use the {tidymodels} package/approach\nTidy the model fit into a data frame with broom::tidy(), then we can use dplyr functions for data wrangling.\n\nbroom::tidy(score_model)\n\n\n\n  \n\n\n\nget evaluative measure into a data frame\n\nbroom::glance(score_model)\n\n\n\n  \n\n\n\n\nMore model data\npredicted scores can be found in the .fitted variable below\n\nbroom::augment(score_model)"
  },
  {
    "objectID": "regression.html#see-also",
    "href": "regression.html#see-also",
    "title": "Regression",
    "section": "See Also",
    "text": "See Also\n\nUse library(purrr) for iteration over categories of nested data\nUse library(tidymodels) for flexible modeling as well as machine learning (e.g. bootstrapping, resampling, clustering, classification, text analysis, and much more, etc.)"
  },
  {
    "objectID": "regression.html#example-of-modeling-with-categories-of-data",
    "href": "regression.html#example-of-modeling-with-categories-of-data",
    "title": "Regression",
    "section": "Example of modeling with categories of data",
    "text": "Example of modeling with categories of data\nIn this next example we nest data by the gender category, then iterate over those categories using the {purrr} package to map anonymous functions over our data frames that is nested by our category. Look closely and you’ll see correlations, linear model regression, and visualizations, all iterated over the gender category. map iteration methods are beyond what we’ve learned so far, but you can notice how tidy-data and tidyverse principles are leveraged in data wrangling and analysis. In future lessons we’ll learn how to employ these techniques along with writing custom functions.\n\nlibrary(tidyverse)\n\nmy_iterations <- evals |> \n  janitor::clean_names() |> \n  nest(data = -gender) |> \n  mutate(cor_age = map_dbl(data, ~ cor(.x$score, .x$age))) |> \n  mutate(cor_bty = map_dbl(data, ~ cor(.x$score, .x$bty_avg)))  |> \n  mutate(my_fit_bty = map(data, ~ lm(score ~ bty_avg, data = .x) |> \n                            broom::tidy())) |> \n  mutate(my_plot = map(data, ~ ggplot(.x, aes(bty_avg, score)) + \n                         geom_point(aes(color = age)) +\n                         geom_smooth(method = lm, \n                                     se = FALSE,\n                                     formula = y ~ x))) |> \n  mutate(my_plot = map2(my_plot, gender, ~ .x +\n                          labs(title = str_to_title(.y))))\n\nThis generates a data frame consisting of lists columns such as my_fit_bty and my_plot\n```{r}\nmy_iterations\n```\n\n\n\n\n  \n\n\n\nmy_terations$my_fit_bty is a list column consisting of tibble-style data frames. We can unnest those data frames.\n```{r}\nmy_iterations |> \n  unnest(my_fit_bty)\n```\n\n\n\n\n  \n\n\n\nmy_iterations$my_plot is a list column consisting of ggplot2 objects. We can pull those out of the data frame\n```{r}\nmy_iterations |> \n  pull(my_plot)\n```"
  },
  {
    "objectID": "tidy_tuesday_itra.html",
    "href": "tidy_tuesday_itra.html",
    "title": "example EDA",
    "section": "",
    "text": "library(tidyverse)\nlibrary(skimr)"
  },
  {
    "objectID": "tidy_tuesday_itra.html#import-data",
    "href": "tidy_tuesday_itra.html#import-data",
    "title": "example EDA",
    "section": "Import data",
    "text": "Import data\nThe data come from a TidyTuesday, a weekly social learning project dedicated to gaining practical experience with R and data science. In this case the TidyTuesday data are based on International Trail Running Association (ITRA) data but inspired by Benjamin Nowak, . We will use the TidyTuesday data that are on GitHub. Nowak’s data are also available on GitHub.\n\nrace_df <- read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-26/race.csv\")\nrank_df <- read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-26/ultra_rankings.csv\")\n\n\nglimpse(race_df)\n\nRows: 1,207\nColumns: 13\n$ race_year_id   <dbl> 68140, 72496, 69855, 67856, 70469, 66887, 67851, 68241,…\n$ event          <chr> \"Peak District Ultras\", \"UTMB®\", \"Grand Raid des Pyréné…\n$ race           <chr> \"Millstone 100\", \"UTMB®\", \"Ultra Tour 160\", \"PERSENK UL…\n$ city           <chr> \"Castleton\", \"Chamonix\", \"vielle-Aure\", \"Asenovgrad\", \"…\n$ country        <chr> \"United Kingdom\", \"France\", \"France\", \"Bulgaria\", \"Turk…\n$ date           <date> 2021-09-03, 2021-08-27, 2021-08-20, 2021-08-20, 2021-0…\n$ start_time     <time> 19:00:00, 17:00:00, 05:00:00, 18:00:00, 18:00:00, 17:0…\n$ participation  <chr> \"solo\", \"Solo\", \"solo\", \"solo\", \"solo\", \"solo\", \"solo\",…\n$ distance       <dbl> 166.9, 170.7, 167.0, 164.0, 159.9, 159.9, 163.8, 163.9,…\n$ elevation_gain <dbl> 4520, 9930, 9980, 7490, 100, 9850, 5460, 4630, 6410, 31…\n$ elevation_loss <dbl> -4520, -9930, -9980, -7500, -100, -9850, -5460, -4660, …\n$ aid_stations   <dbl> 10, 11, 13, 13, 12, 15, 5, 8, 13, 23, 13, 5, 12, 15, 0,…\n$ participants   <dbl> 150, 2300, 600, 150, 0, 300, 0, 200, 120, 100, 300, 50,…\n\n\n\nglimpse(rank_df)\n\nRows: 137,803\nColumns: 8\n$ race_year_id    <dbl> 68140, 68140, 68140, 68140, 68140, 68140, 68140, 68140…\n$ rank            <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, NA, NA, NA,…\n$ runner          <chr> \"VERHEUL Jasper\", \"MOULDING JON\", \"RICHARDSON Phill\", …\n$ time            <chr> \"26H 35M 25S\", \"27H 0M 29S\", \"28H 49M 7S\", \"30H 53M 37…\n$ age             <dbl> 30, 43, 38, 55, 48, 31, 55, 40, 47, 29, 48, 47, 52, 49…\n$ gender          <chr> \"M\", \"M\", \"M\", \"W\", \"W\", \"M\", \"W\", \"W\", \"M\", \"M\", \"M\",…\n$ nationality     <chr> \"GBR\", \"GBR\", \"GBR\", \"GBR\", \"GBR\", \"GBR\", \"GBR\", \"GBR\"…\n$ time_in_seconds <dbl> 95725, 97229, 103747, 111217, 117981, 118000, 120601, …"
  },
  {
    "objectID": "tidy_tuesday_itra.html#eda-with-skimr",
    "href": "tidy_tuesday_itra.html#eda-with-skimr",
    "title": "example EDA",
    "section": "EDA with skimr",
    "text": "EDA with skimr\n\nskim(race_df)\n\n\nData summary\n\n\nName\nrace_df\n\n\nNumber of rows\n1207\n\n\nNumber of columns\n13\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n5\n\n\nDate\n1\n\n\ndifftime\n1\n\n\nnumeric\n6\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nevent\n0\n1.00\n4\n57\n0\n435\n0\n\n\nrace\n0\n1.00\n3\n63\n0\n371\n0\n\n\ncity\n172\n0.86\n2\n30\n0\n308\n0\n\n\ncountry\n4\n1.00\n4\n17\n0\n60\n0\n\n\nparticipation\n0\n1.00\n4\n5\n0\n4\n0\n\n\n\nVariable type: Date\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nmedian\nn_unique\n\n\n\n\ndate\n0\n1\n2012-01-14\n2021-09-03\n2017-09-30\n711\n\n\n\nVariable type: difftime\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nmedian\nn_unique\n\n\n\n\nstart_time\n0\n1\n0 secs\n82800 secs\n05:00:00\n39\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nrace_year_id\n0\n1\n27889.65\n20689.90\n2320\n9813.5\n23565.0\n42686.00\n72496.0\n▇▃▃▂▂\n\n\ndistance\n0\n1\n152.62\n39.88\n0\n160.1\n161.5\n165.15\n179.1\n▁▁▁▁▇\n\n\nelevation_gain\n0\n1\n5294.79\n2872.29\n0\n3210.0\n5420.0\n7145.00\n14430.0\n▅▇▇▂▁\n\n\nelevation_loss\n0\n1\n-5317.01\n2899.12\n-14440\n-7206.5\n-5420.0\n-3220.00\n0.0\n▁▂▇▇▅\n\n\naid_stations\n0\n1\n8.63\n7.63\n0\n0.0\n9.0\n14.00\n56.0\n▇▆▁▁▁\n\n\nparticipants\n0\n1\n120.49\n281.83\n0\n0.0\n21.0\n150.00\n2900.0\n▇▁▁▁▁\n\n\n\n\n\n\nrace_df |> \n  count(country, sort = TRUE) |> \n  filter(str_detect(country, regex(\"Ke\", ignore_case = TRUE)))\n\n\n\n  \n\n\n\n\nrace_df |> \n  filter(country == \"Turkey\")\n\n\n\n  \n\n\n\n\nrace_df |> \n  count(participation, sort = TRUE)\n\n\n\n  \n\n\n\n\nrace_df |> \n  count(participants, sort = TRUE)\n\n\n\n  \n\n\n\n\nskim(rank_df)\n\n\nData summary\n\n\nName\nrank_df\n\n\nNumber of rows\n137803\n\n\nNumber of columns\n8\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n4\n\n\nnumeric\n4\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nrunner\n0\n1.00\n3\n52\n0\n73629\n0\n\n\ntime\n17791\n0.87\n8\n11\n0\n72840\n0\n\n\ngender\n30\n1.00\n1\n1\n0\n2\n0\n\n\nnationality\n0\n1.00\n3\n3\n0\n133\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nrace_year_id\n0\n1.00\n26678.70\n20156.18\n2320\n8670\n21795\n40621\n72496\n▇▃▃▂▂\n\n\nrank\n17791\n0.87\n253.56\n390.80\n1\n31\n87\n235\n1962\n▇▁▁▁▁\n\n\nage\n0\n1.00\n46.25\n10.11\n0\n40\n46\n53\n133\n▁▇▂▁▁\n\n\ntime_in_seconds\n17791\n0.87\n122358.26\n37234.38\n3600\n96566\n114167\n148020\n296806\n▁▇▆▁▁\n\n\n\n\n\n\nrank_df |> \n  filter(str_detect(nationality, regex(\"ken\", ignore_case = TRUE)))\n\n\n\n  \n\n\n\n\nrank_df |> \n  arrange(rank)\n\n\n\n  \n\n\nrank_df |> \n  count(rank, sort = TRUE)\n\n\n\n  \n\n\nrank_df |> \n  drop_na(rank) |> \n  count(rank, gender, age, sort = TRUE)\n\n\n\n  \n\n\nrace_df |> \n  count(distance, sort = TRUE)\n\n\n\n  \n\n\n\n\nrank_df |> \n  filter(race_year_id == 41449)\n\n\n\n  \n\n\nrace_df |> \n  filter(race_year_id == 41449)\n\n\n\n  \n\n\nrace_df |> \n  filter(distance == 161)\n\n\n\n  \n\n\n\n\nrace_df\n\n\n\n  \n\n\n\n\nrace_df |> \n  count(race, city, sort = TRUE)\n\n\n\n  \n\n\nrace_df |> \n  filter(race == \"Centurion North Downs Way 100\")\n\n\n\n  \n\n\n\n\nrace_df |> \n  filter(race_year_id == 68140)\n\n\n\n  \n\n\nrace_df |> \n  filter(race == \"Millstone 100\")\n\n\n\n  \n\n\nrace_df |> \n  filter(event == \"Peak District Ultras\")\n\n\n\n  \n\n\nrace_df |> \n  count(race, sort = TRUE)  \n\n\n\n  \n\n\nrace_df |> \n  count(city, sort = TRUE)  \n\n\n\n  \n\n\nrace_df |> \n  count(event, sort = TRUE)  \n\n\n\n  \n\n\n\n\nrace_df |> \n  filter(event == \"Burning River Endurance Run\")"
  },
  {
    "objectID": "tidy_tuesday_itra.html#visualize-wrangle-and-summarize",
    "href": "tidy_tuesday_itra.html#visualize-wrangle-and-summarize",
    "title": "example EDA",
    "section": "Visualize, wrangle, and summarize",
    "text": "Visualize, wrangle, and summarize\nHere I’m using this State of Ultra Running report as a model to demonstrate some of the capabilities of R / Tidyverse\n\njoin datasets\n\nJoin, Assign, and Pipe\nIn this case I want to join the two data frames rank_df and race_df using the left_join() function.\nI can assign the output of a “data pipe” (i.e. data sentence) to use in subsequent code-chunks. A common R / Tidyverse assignment operator is the <- characters. You can read this as “gets value from”.\nAdditionally, I’m using a pipe operator (|>) as a conjunction to connect functions. In this way I can form a data sentence. Many people call the data sentence a data pipe, or just a pipe. You may see another common pipe operator: %>%. \\> and %>% are synonymous.\nusing dplyr::left_join() I combine the two data sets and then use {ggplot2} to create a line graph of participants by year.\n\nmy_df_joined <- rank_df |> \n  left_join(race_df, by = \"race_year_id\") |>\n  mutate(my_year = lubridate::year(date))\n\n\n\n\nViz participants\nLet’ make a quick line plot showing how many people participate in races each year. Here we have a date field this is also a date data-type. Data types are important and in this example using a data data-type means {ggplot2} will simplify our x-axis labels.\nHere we use the {lubridate} package to help manage my date data-types. We also use {ggplot2} to generate a line graph as a time series via the {ggplot2} package and a geom_line() layer. Note that {ggplot2} uses the ‘+’ as the conjunction or pipe.\n\nrank_df |> \n  left_join(race_df |> select(race_year_id, date), by = \"race_year_id\") |>\n  mutate(my_year = lubridate::year(date)) |> \n  count(my_year, sort = TRUE) |> \n  ggplot(aes(my_year, n)) +\n  geom_line()\n\n\n\n\n\n\nby distance\nHere I use count() in different ways to see what I can see. I comment out each attempt before settling on summarizing a table of total country participants by year.\n\nmy_df_joined |> \n  mutate(participation = str_to_lower(participation)) |> \n  # count(participation, sort = TRUE)\n  # count(city) |> \n  # count(race) |> \n  count(my_year, country, sort = TRUE)\n\n\n\n  \n\n\nmy_df_joined |> \n  mutate(participation = str_to_lower(participation)) |> \n  count(my_year, country, sort = TRUE) |> \n  drop_na(country) |> \n  mutate(country = fct_lump_prop(country, prop = .03)) |> \n  ggplot(aes(my_year, n)) +\n  geom_line(aes(color = country))\n\n\n\n\n\n\nby country\nI used fct_lump_prop() in the previous code-chunk to lump the country variable into categories by frequency. Here we refine the categories into specific levels. We are still mutating the country variable as a categorical factor; this time using the fct_other() function of {forcats} with some pre-defined levels (see the my_levels vector in the code-chunk below).\n\nmy_levels <- c(\"United States\", \"France\", \"United Kingdom\", \"Spain\")\n\nmy_df_joined |> \n  mutate(country = fct_other(country, keep = my_levels)) |> \n  count(my_year, country, sort = TRUE) |> \n  drop_na(country) |> \n  ggplot(aes(my_year, n, color = country)) +\n  geom_line() +\n  geom_point() +\n  scale_color_brewer(palette = \"Dark2\") \n\n\n\n\n\n\nCountry race-host\n\nmy_df_joined |> \n  drop_na(country) |> \n  mutate(country = fct_lump_n(country, n = 7)) |>\n  count(country, sort = TRUE) |> \n  ggplot(aes(x = n, y = fct_reorder(country, n))) +\n  geom_col()\n\n\n\n\n\n\nNationality of runner\n\nmy_df_joined |> \n  mutate(nationality = fct_lump_n(nationality, n = 7)) |> \n  count(nationality, sort = TRUE) |> \n  ggplot(aes(n, fct_reorder(nationality, n))) +\n  geom_col()\n\n\n\n\n\n\nUnique participants\n\nmy_df_joined |> \n  distinct(my_year, runner) |> \n  count(my_year) |> \n  ggplot(aes(my_year, n)) +\n  geom_line()\n\n\n\n\n\n\nParticipant frequency separated by gender\nNote the use of count, if_else, as.character, and group_by to transform the data for visualizing. Meanwhile, the visual bar graph is a proportional graph with the y-axis label by percentage. We do this by manipulating the plot scales. Scales are also used to choose colors from a predefined palette (i.e. “Dark2”.) Findally, we facet the plot by gender (See facet_wrap()).\n\nmy_df_joined |> \n  count(my_year, gender, runner, sort = TRUE) |> \n  mutate(n_category = if_else(n >= 5, \"more\", as.character(n))) |> \n  group_by(my_year) |> \n  mutate(total_races = sum(n)) |> \n  ungroup() |> \n  ggplot(aes(my_year, total_races))  +\n  geom_col(aes(fill = fct_rev(n_category)), position = \"fill\") +\n  scale_fill_brewer(palette = \"Dark2\") +\n  scale_y_continuous(labels = scales::percent) +\n  facet_wrap(vars(gender)) \n\n\n\n\n\n\nPace per mile\nWe want to calculate a value for each runner’s pace (i.e. minute_miles). We have to create and convert a character data-type of the time variable into a numeric floating point (or dbl) data-type so that we can calculate pace (i.e. race-minutes divided by distance.) These data transformations required a lot of manipulation as I was thinking through my goal. I could optimized this code, perhaps. However it works and I’ve got other things to do. Do I care if the CPU works extra hard? No, not in this case.\n\nmy_df_joined |> \n  mutate(time_hms = str_remove_all(time, \"[HMS]\"), .after = time) |> \n  mutate(time_hms = str_replace_all(time_hms, \"\\\\s\", \":\")) |> \n  separate(time_hms, into = c(\"h\", \"m\", \"s\"), sep = \":\") |> \n  mutate(bigminutes = (\n    (as.numeric(h) * 60) + as.numeric(m) + (as.numeric(s) * .75)\n    ), .before = h) |> \n  mutate(pace = bigminutes / distance, .before = bigminutes) |> \n  drop_na(pace, distance, my_year) |> \n  filter(distance > 0,\n         pace > 0) |> \n  group_by(my_year, gender) |>  \n  summarise(avg_pace = mean(pace), max_pace = max(pace), min_pace = min(pace)) |> \n  pivot_longer(-c(my_year, gender), names_to = \"pace_type\")  |> \n  separate(value, into = c(\"m\", \"s\"), remove = FALSE) |> \n  mutate(h = \"00\", .before = m) |> \n  mutate(m = str_pad(as.numeric(m), width = 2, pad = \"0\")) |> \n  mutate(s = str_pad(round(as.numeric(str_c(\"0.\",s)) * 60), width = 2, pad = \"0\")) |> \n  unite(minute_miles, h:s, sep = \":\") |> \n  mutate(minute_miles = hms::as_hms(minute_miles)) |> \n  # drop_na(gender) |> \n  ggplot(aes(my_year, minute_miles)) +\n  geom_line(aes(color = pace_type), size = 1) +\n  scale_color_brewer(palette = \"Dark2\") +\n  theme_classic() +\n  facet_wrap(vars(gender))\n\n`summarise()` has grouped output by 'my_year'. You can override using the\n`.groups` argument.\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\nAge trends\nIn this code-chunk we use a {ggplot2} function, cut_width(), to generate rough categories by age. dplyr::case_when() is a more thorough and sophisticated way to make some cuts in my data, but ggplot2::cut_width() works well for a quick visualization.\nNote the use of labels, scales, themes, and guides in the last visualization. A good plot will need refinement with some or all of these functions.\n\nmy_df_joined |> \n  mutate(age_cut = cut_width(age, width = 10, boundary = 0), .after = age) |> \n  count(age_cut, gender, sort = TRUE)\n\n\n\n  \n\n\nmy_df_joined |> \n  filter(age < 80) |> \n  drop_na(gender) |> \n  ggplot(aes(y = cut_width(age, width = 10, boundary = 0))) +\n  geom_bar(aes(fill = gender)) +\n  facet_wrap(vars(gender))\n\n\n\nmy_df_joined |> \n  filter(age < 70, age >= 20) |>\n  drop_na(gender) |> \n  ggplot(aes(my_year)) +\n  geom_bar(aes(fill = fct_rev(cut_width(age, width = 10, boundary = 0))), position = \"fill\") +\n  scale_y_continuous(labels = scales::percent) +\n  scale_fill_brewer(palette = \"Dark2\") +\n  labs(fill = \"Age\", title = \"Age distribution of ultra runners\",\n       caption = \"Source: ITRA > Benjamin Nowak > Tidy Tuesday\",\n       x = NULL, y = NULL) +\n  theme_classic() +\n  theme(legend.position = \"top\", plot.title.position = \"plot\") + \n  guides(fill = guide_legend(reverse = TRUE))"
  },
  {
    "objectID": "viz.html",
    "href": "viz.html",
    "title": "Viz with ggplot2",
    "section": "",
    "text": "I only need the ggplot2 package but I like to load tidyverse because it includes 8 complimentary packages, including ggplot2.\nGet more information from:"
  },
  {
    "objectID": "viz.html#ggplot2-template-code",
    "href": "viz.html#ggplot2-template-code",
    "title": "Viz with ggplot2",
    "section": "ggplot2 template code",
    "text": "ggplot2 template code\nThe ggplot2 template is used to identify the dataframe, identify the x and y axis, and define visualized layers\n\nggplot(data = ---, mapping = aes(x = ---, y = ---)) + geom_----()\n\nNote: ---- is meant to imply text (function names, dataframe names, variable names) you supply.\nIt is helpful to see the argument mapping, above. In practice, rather than typing the formal arguments, code is typically shorthanded to this:\n\ndataframe %>%  ggplot(aes(xvar, yvar)) + geom_----()"
  },
  {
    "objectID": "viz.html#goal",
    "href": "viz.html#goal",
    "title": "Viz with ggplot2",
    "section": "Goal",
    "text": "Goal\nVisualize a scatter plot showing the relationship of mass to height for Star Wars characters in the dplyr::starwars dataframe, excluding the heaviest character. Indicate a linear regression line."
  },
  {
    "objectID": "viz.html#import-data",
    "href": "viz.html#import-data",
    "title": "Viz with ggplot2",
    "section": "Import data",
    "text": "Import data\ndplyr has an on-board dataset, starwars\n\ndata(starwars)\nstarwars"
  },
  {
    "objectID": "viz.html#steps-to-visualization",
    "href": "viz.html#steps-to-visualization",
    "title": "Viz with ggplot2",
    "section": "Steps to Visualization",
    "text": "Steps to Visualization\n\nDraw the base layer\nThis feels like, and looks like, you drew an empty box.\n\nstarwars %>% \n  ggplot() \n\n\n\n\nBut wait, there’s more….\n\n\nMap the aesthetics to variables in the data frame\nStill doesn’t look like much. You will initialize the plot scales and labels based on the values of the variables in the dataframe.\n\nstarwars %>% \n  filter(mass < 500) %>% \n  ggplot(aes(height, mass))\n\n\n\n\nIn the above, I subset the data, removing any Star Wars characters weighing more than 500 Kg – dplyr::filter(). Then I initialized the base layer with the height as the x axis and mass as the y axis. ggplot drew the scales for me.\n\n\nVisualize a layer\nSince I have two numeric variables, height and mass, I’ll start with a scatter plot. Scatter plots are generated by the geom_point() function.\n\nstarwars %>% \n  filter(mass < 500) %>% \n  ggplot(aes(height, mass)) +\n  geom_point() \n\n\n\n\n\n\nGlobal v local arguments\nSo far, the aesthetics are mapped in the aes() function within the initial ggplot function. As such, these values are mapped globally and all layers are affected by this mapping. See the aes() function, above. Arguments can also be mapped locally, within a geom function layer, as as geom_point(aes(height, mass)).\n\nstarwars %>% \n  filter(mass < 500) %>% \n  ggplot() +\n  geom_point(aes(height, mass)) \n\n\n\n\n\n\nMapping v Setting\nDataframe values can be mapped inside the aesthetic, aes(), to visualize variable dataframe values. Alternatively, data values can be set as an argument outside the aes() function but inside the geom_ function. This is done to affect a visual quality that is manually assigned, as opposed to being derived from variable data values.\nAesthetic arguments include:\n\ncolor\nfill\nsize\nlinetype\nopacity\nshape\nand more see documentation for each geom_\n\n\nMapping: color is mapped inside aes() function. In this case, color = starwars$gender\n\n\nstarwars %>% \n  filter(mass < 500) %>% \n  ggplot() +\n  # geom_point(mapping = aes(x = height, y = mass, color = gender))\n  geom_point(aes(height, mass, color = gender))\n\n\n\n\nNotice the legend was drawn automatically, above, by mapping an aesthetic\n\nSetting: The color argument can be set outside the aes() function, but within the geom_ function. In this case with color = \"goldenrod\"\n\n\nstarwars %>% \n  filter(mass < 500) %>% \n  ggplot() +\n  geom_point(aes(height, mass), color = \"goldenrod\")"
  },
  {
    "objectID": "viz.html#layers",
    "href": "viz.html#layers",
    "title": "Viz with ggplot2",
    "section": "Layers",
    "text": "Layers\n\n\n\n\n\n\nMore layers\n\n\n\nA list of all available geom_ functions, or layers, can be found in the help or on the ggplot2 website\n\n\n\nCommon geom_ functions\n\n\n\nType\nGeom\n\n\n\n\nBar graph:\ngeom_bar() geom_col()\n\n\nHistogram:\ngeom_histogram()\n\n\nScatter plot:\ngeom_point() geom_jitter()\n\n\nLine graph:\ngeom_line()\n\n\nBox plot:\ngeom_boxplot()\n\n\nDensity:\ngeom_density() geom_violin()\n\n\nHeat map:\ngeom_heatmap()\n\n\nMapping:\ngeom_sf()\n\n\nRegression line:\ngeom_smooth()\n\n\n\n\n\nBoxplot\n\nstarwars %>% \n  mutate(species = fct_lump_min(species, 2)) %>% \n  ggplot(aes(species, height)) +\n  geom_boxplot() \n\n\n\n\n\n\nLine graph\n\nbabynames::babynames %>% \n  filter(name == \"Watts\") %>% \n  ggplot(aes(year, n)) +\n  # geom_point() +\n  geom_line()\n\n\n\n\n\n\nOverplotting\nThere are two simple approaches to visualizing overplotted data: geom_jitter() and decrease the opacity be setting the alpha = argument.\n\nAdjust opacity. The alpha argument within the geom function affects the opacity of the points. In this way, overplotted data will appear as darker points on the plot\n\n\nstarwars %>% \n  filter(mass < 500) %>% \n  ggplot() +\n  geom_point(aes(height, mass), alpha = .3)\n\n\n\n\n\nJitter the data with geom_jitter()\n\ngeom_jitter will not change the values of the data but it will offset data points, making it easier to perceive the overplotting.\n\nstarwars %>% \n  filter(mass < 500) %>% \n  ggplot() +\n  geom_jitter(aes(height, mass))\n\n\n\n\n\n\nMultiple layers\nEach layer, visualized by a geom_ function, can support local arguments and draw from the global settings. Below we use the geom_line() function, followed by the geom_point() function.\nbabynames %>%\n  ggplot(aes(year, prop)) +\n  geom_line(aes(color = sex)) +\n  geom_point(alpha = 0.4, shape = \"cross\")\n\nThe full code for the above graph can be seen below.\nlibrary(babynames)\nlibrary(ggplot)\n\nbabynames %>% \n  filter(name == \"John\" & sex == \"M\" | \n           name == \"Elizabeth\" & sex == \"F\") %>% \n  ggplot(aes(year, prop)) +\n  geom_line(aes(color = sex)) +\n  geom_point(alpha = 0.4, shape = \"cross\") +\n  geom_text(data = . %>% filter(year == 1965), aes(label = name),\n            nudge_y = .009) +\n  labs(title = \"Name Popularity\") + \n  theme(legend.position = \"none\")\n\n\nGoal\nRecall the goal mentioned in the beginning. We want a scatter plot and a regression line. The regression line is drawn with the geom_smooth() function.\n\nstarwars %>% \n  filter(mass < 500) %>% \n  ggplot(aes(height, mass)) +\n  geom_point() +\n  geom_smooth(method = lm, se = FALSE)"
  },
  {
    "objectID": "viz.html#arrange-order",
    "href": "viz.html#arrange-order",
    "title": "Viz with ggplot2",
    "section": "Arrange order",
    "text": "Arrange order\nCategorical values are most easily ordered with the forcats library. Part of the Tidyverse, the forcats package is used to transform string data as a factor data type. Data types in R can be simple distinctions useful in efficient computation, such as calculating numeric outcomes versus manipulating character data (i.e. string or text data). R data types are rich and sometimes complex. Staying simple, text data consisting of categories, may be efficiently handled as a factor data type. For example, eye colors can be categorized. Brown, blue, and green are nominal categorical values for the factor variable eye_color. Among other things, treating eye_color as a factor data type enables visually ordering categorical values by frequency.\n\nBefore arranging order\n\nmsleep %>% \n  ggplot(aes(vore)) +\n  geom_bar()\n\n\n\n\n\n\nArranging order with \\\\{forcats\\\\}\nChange the order of the bars by the frequency of observations using forcats::fct_infreq()\n\nmsleep %>% \n  ggplot(aes(fct_infreq(vore))) +\n  geom_bar() \n\n\n\n\nNotice below, we use the fill = argument to set the color of an individual bar. In the scatter plot examples, above, we used the color = argument. In many geoms_ you can use both color and fill arguments. How do these arguments differ? Where can you look to find out more about fill and color?\n\nstarwars %>% \n  ggplot(aes(fct_rev(fct_infreq(eye_color)))) +\n  geom_bar(fill = \"grey70\") +\n  geom_bar(data = starwars %>% filter(eye_color == \"orange\"), fill = \"darkorange\") +\n  coord_flip()"
  },
  {
    "objectID": "viz.html#facet-wrap",
    "href": "viz.html#facet-wrap",
    "title": "Viz with ggplot2",
    "section": "Facet wrap",
    "text": "Facet wrap\nFaceting is great way to make subplots of the same data frame. See both facet_wrap() and facet_grid()\n\nmpg %>% \n  ggplot(aes(displ, hwy)) +\n  geom_point() +\n  facet_wrap(vars(class))"
  },
  {
    "objectID": "viz.html#scales",
    "href": "viz.html#scales",
    "title": "Viz with ggplot2",
    "section": "Scales",
    "text": "Scales\nScales are used to affect the visual qualities of the data. I’ll introduce scales to visualize discrete categories by associating each discrete value with a specific color. Read more about scales.\nViridis scales apply color palettes to continuous, discrete, or binned data. For discrete data we can use the scale_fill_viridis_d() function.\n\nBy using one the scale_fill_ functions, we are able to affect the variable values associated in the fill = conservation argument.\n\n\nmy_plot <- msleep %>% \n  ggplot(aes(fct_infreq(vore), sleep_total)) +\n  geom_col(aes(fill = conservation))\n\nmy_plot +\n  scale_fill_viridis_d(na.value = \"grey80\")\n\n\n\n\nThe color brewer palette is similar but has a wider array of palettes to choose from. Below we use scale_fill_brewer() and a default qualitative color palette by setting the type = argument to qual (for qualitative). Alternatively, or additionally, we could assign a palette = argument to choose a particular ColorBrewer palette, such as choosing the “Dark2” palette with the argument palette = \"Dark2\"\n\nmy_plot +\n  scale_fill_brewer(type = \"qual\", na.value = \"grey80\") \n\n\n\n\nSometimes a manual scale is preferred. Below we use scale_fill_manual() to associate a defined set of color names with my fill = conservation argument\n\nmycolors <- c(\"firebrick\", \"forestgreen\", \"navy\", \"darkorange\", \n               \"goldenrod\", \"sienna\")\n\nmy_plot +\n  scale_fill_manual(values = mycolors, na.value = \"grey80\") \n\n\n\n\nTo find available colors: Google search “R color names”, or specific to ColorBrewer….\n\n#display.brewer.pal(7,\"Dark2\")\nRColorBrewer::display.brewer.all()\n\n\n\n\nScales are used to manipulate the visual properties of the data. Beyond using scales to modify colors, another example is logarithmic scales to account for data skew. In this way you can clarify the data pattern. For example, using the ChickWeight dataset, we visualize the weights of the chicks over time. Hint: You can visualize the data skew with a histogram, geom_histogram().\n\ndata(\"ChickWeight\")\n\nChickWeight %>% \n  ggplot(aes(Time, weight, color = Diet)) +\n  geom_line(aes(group = Chick))\n\n\n\n\nUsing scale_y_log10 we can alter the scale to highlight a more understandable data pattern\n\nchicken_plot <- ChickWeight %>% \n  ggplot(aes(Time, weight, color = Diet)) +\n  geom_line(aes(group = Chick)) +\n  scale_y_log10()\nchicken_plot"
  },
  {
    "objectID": "viz.html#labels",
    "href": "viz.html#labels",
    "title": "Viz with ggplot2",
    "section": "Labels",
    "text": "Labels\nThe labs() function is specialized scales function, used to apply labels. For example, use the labs() function to add a title, subtitle, legend title, modify axis labels, and set a caption. See more on scales.\nFirst let’s wrangle a data frame, make a plot, and assign it to an object name\n\nplot_sleep <- msleep %>% \n  mutate(vore = case_when(\n    vore == \"herbi\" ~ \"Herbivore\",\n    vore == \"omni\"  ~ \"Omnivore\",\n    vore == \"carni\" ~ \"Carnivore\",\n    vore == \"insecti\" ~ \"Insectivore\"\n  ))  %>%\n  mutate(my_order = sum(sleep_total), .by = vore) |> \n  summarise(sleep_total = sum(sleep_total, na.rm = TRUE), .by = c(vore, my_order, conservation)) |> \n  ggplot(aes(fct_rev(fct_reorder(vore, my_order)), sleep_total)) +\n  geom_col(aes(fill = conservation)) +\n  scale_fill_brewer(type = \"qual\", na.value = \"grey80\")\n\nNow we can add labels with the labs function\n\nplot_sleep +\n  labs(title = \"Animal sleep times\", \n       subtitle = \"A practice dataset\",\n       fill = \"Conservation\\nType\",\n       x = \"\",\n       y = \"Sleep time in hours\",\n       caption = \"Source: ggplot::msleep\")"
  },
  {
    "objectID": "viz.html#themes",
    "href": "viz.html#themes",
    "title": "Viz with ggplot2",
    "section": "Themes",
    "text": "Themes\nThemes are used to manipulate the stylistic characteristics of the non-data components of your plot, such as font faces, text sizes, and grid lines. ProTip: quickly manipulate a single plot with preset themes such as theme_dark, or use a specialized theme extension such as theme_ipsum from the hrbrthemes package.\n\nhttps://ggplot2.tidyverse.org/reference/ggtheme.html\n\nfor example… theme_dark(), theme_light(), theme_classic()\n\nhttps://cinc.rud.is/web/packages/hrbrthemes/\nhttps://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/\n\nSee more on themes\n\nExample themes\n\n\n\nImage source: from R for Data Science by Grolemund & Wickham\n\n\n\n\ntheme_dark()\n\nplot_sleep +\n  theme_dark()\n\n\n\n\n\n\ntheme_classic\n\nplot_sleep +\n  theme_classic()\n\n\n\n\n\n\nhbrthemes\nhttps://cinc.rud.is/web/packages/hrbrthemes/\n\nplot_sleep +\n  hrbrthemes::theme_ipsum(grid = \"Y\") +\n  hrbrthemes::scale_fill_ipsum(na.value = \"grey80\",\n                               labels = c(\"Critical\", \"Domesticated\", \n                                          \"Endangered\", \"Least Concern\", \n                                          \"Threatened\", \"Vulnerable\")) +\n  theme(plot.title.position = \"plot\")"
  },
  {
    "objectID": "viz.html#combine-plots",
    "href": "viz.html#combine-plots",
    "title": "Viz with ggplot2",
    "section": "Combine plots",
    "text": "Combine plots\nThe patchwork package makes it “ridiculously simple to combine separate ggplot objects into the same graphic.” The /will separate plots vertically. The | will separate plots horizontally. See more about patchwork\n\nTry also: (plot_sleep | chicken_plot)\n\n\n# https://patchwork.data-imaginist.com/\nlibrary(patchwork)\n\n(plot_sleep / chicken_plot)"
  },
  {
    "objectID": "viz.html#interactive-plots",
    "href": "viz.html#interactive-plots",
    "title": "Viz with ggplot2",
    "section": "Interactive plots",
    "text": "Interactive plots\nUse the ggplotly function will transform your static ggplot object into an interactive plot. This interactive plot can be used in dashboards and web presentations.\nSee more at the Plotly ggplot2 Library page, and the Interactive web-based data visualization with R, plotly, and shiny book.\n\nlibrary(plotly)\nggplotly(plot_sleep)"
  },
  {
    "objectID": "viz.html#annimate-plots",
    "href": "viz.html#annimate-plots",
    "title": "Viz with ggplot2",
    "section": "Annimate plots",
    "text": "Annimate plots\nUse the gganimate package to bring your plot to life through the wonders of animation. Learn more at the resource page for gganimate\nFor Example:\n\n\n\n\n\nImage source:  https://gganimate.com/index.html#yet-another-example"
  },
  {
    "objectID": "viz.html#attribution",
    "href": "viz.html#attribution",
    "title": "Viz with ggplot2",
    "section": "Attribution",
    "text": "Attribution\nAdapted in whole or in part; based on the Visualize Data with ggplot2 slides by Garrett Grolemund at RStudio which carries the CC BY Garrett Grolemund, RStudio license."
  },
  {
    "objectID": "wrangle.html",
    "href": "wrangle.html",
    "title": "Wrangle Data with {dplyr}",
    "section": "",
    "text": "{dplyr} verbs help you wrangle, clean, and normalize your data\n\n\n\ndplyr function\nuse for\n\n\n\n\nselect()\nsubset columns\n\n\nfilter()\nsubset rows\n\n\narrange()\nsort rows by column variable values\n\n\ngroup_by()\nuse with summarize for subtotals\n\n\nsummarize()\ngenerate column totals and subtotals, etc.\n\n\ncount()\na specialized summarize() function\n\n\n\n\nExamples\nFirst we need to load the {dplyr} package for wrangling and the {readr} package for importing CSV data. In our case, we’ll do that by loading the tidyverse which loads {dplyr}, {readr} and several other helpful packages. Then we need to load our data\n\nlibrary(tidyverse)\nbrodhead_center <- read_csv(\"data/brodhead_center.csv\")\n\n\nselect()\n\nbrodhead_center |> \n  select(name, type)\n\n\n\n  \n\n\n\n\n\n\n\n\nSelect columns\n\n\n\n\nfilter()\n\nbrodhead_center |> \n  filter(menuType == \"dessert\")\n\n\n\n  \n\n\n\n\n\n\n\n\nFilter by rows\n\n\n\n\narrange()\n\nbrodhead_center |> \n  arrange(cost)\n\n\n\n  \n\n\n\n\n\n\n\n\nArrange rows by the values in a column\n\n\n\n\nmutate()\n\nbrodhead_center |> \n  mutate(ratings_high = rating * 2)\n\n\n\n  \n\n\n\n\n\n\n\n\nCreate new variable or modify variable with mutate()\n\n\nWe can also mutate data by groups or categories\n\nbrodhead_center |> \n  mutate(avg_item_rating_rest = mean(rating, na.rm = TRUE), \n         .by = name, \n         .after = name)\n\n\n\n  \n\n\n\n\n\ncount()\n\n\n\n\n\n\n\n  \n    \n      Count values in a group\n    \n    \n    \n      menuType\n      n\n    \n  \n  \n    entree\n24\n    appetizer\n23\n    dessert\n7\n    side\n5\n  \n  \n  \n\n\n\n\nbrodhead_center |> \n  count(menuType)\n\n\n\n  \n\n\n\n\n\ngroup_by() & summarise()\n\n\n\n\n\n\n\n  \n    \n      Summarise column\n    \n    \n    \n      Sum_of_cost\n    \n  \n  \n    412\n  \n  \n  \n\n\n\n\nbrodhead_center |> \n  group_by(name) |> \n  summarise(min_cost = min(cost), mean_cost = mean(cost), max_cost = max(cost))\n\n\n\n  \n\n\n\n\n\n\n\n\nReusehttps://creativecommons.org/licenses/by-nc/4.0/"
  },
  {
    "objectID": "regression.html#example-of-iterative-modeling-with-nested-categories-of-data",
    "href": "regression.html#example-of-iterative-modeling-with-nested-categories-of-data",
    "title": "Regression",
    "section": "Example of iterative modeling with nested categories of data",
    "text": "Example of iterative modeling with nested categories of data\nIn this next example we nest data by the gender category, then iterate over those categories using the {purrr} package to map anonymous functions over our data frames that is nested by our category. Look closely and you’ll see correlations, linear model regression, and visualizations, all iterated over the gender category. map iteration methods are beyond what we’ve learned so far, but you can notice how tidy-data and tidyverse principles are leveraged in data wrangling and analysis. In future lessons we’ll learn how to employ these techniques along with writing custom functions. The lefthand sidebar of this website has links to learn more about {purrr} and {tidymodels}.\n\nlibrary(tidyverse)\n\nmy_iterations <- evals |> \n  janitor::clean_names() |> \n  nest(data = -gender) |> \n  mutate(cor_age = map_dbl(data, ~ cor(.x$score, .x$age))) |> \n  mutate(cor_bty = map_dbl(data, ~ cor(.x$score, .x$bty_avg)))  |> \n  mutate(my_fit_bty = map(data, ~ lm(score ~ bty_avg, data = .x) |> \n                            broom::tidy())) |> \n  mutate(my_plot = map(data, ~ ggplot(.x, aes(bty_avg, score)) + \n                         geom_point(aes(color = age)) +\n                         geom_smooth(method = lm, \n                                     se = FALSE,\n                                     formula = y ~ x))) |> \n  mutate(my_plot = map2(my_plot, gender, ~ .x +\n                          labs(title = str_to_title(.y))))\n\nThis generates a data frame consisting of lists columns such as my_fit_bty and my_plot\n```{r}\nmy_iterations\n```\n\n\n\n\n  \n\n\n\nmy_terations$my_fit_bty is a list column consisting of tibble-style data frames. We can unnest those data frames.\n```{r}\nmy_iterations |> \n  unnest(my_fit_bty)\n```\n\n\n\n\n  \n\n\n\nmy_iterations$my_plot is a list column consisting of ggplot2 objects. We can pull those out of the data frame\n```{r}\nmy_iterations |> \n  pull(my_plot)\n```"
  },
  {
    "objectID": "proj.html#archiving-dependencies-with-renv",
    "href": "proj.html#archiving-dependencies-with-renv",
    "title": "Projects",
    "section": "Archiving dependencies with {renv}",
    "text": "Archiving dependencies with {renv}\n“The renv package helps you create reproducible environments for your R projects.” {renv}\n\nThe renv package is a new effort to bring project-local R dependency management to your projects. The goal is for renv to be a robust, stable replacement for the Packrat package, with fewer surprises and better default behaviors. — Introduction to renv / Kevin Ushey"
  }
]